/**
 * @file Firebase Security Rules for ReliefLink Firestore database.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for victims and volunteers,
 * where only the authenticated user (or an admin) can access their own data.
 * It also allows for public read access on certain collections with owner-only writes.
 * Admin privileges are granted based on the existence of a user's ID in the `/admins` collection.
 *
 * Data Structure:
 * - /victims/{victimId}: Stores victim profiles, accessible only to the victim or an admin.
 * - /volunteers/{volunteerId}: Stores volunteer profiles, accessible only to the volunteer or an admin.
 * - /requests/{requestId}: Stores requests for aid. Publicly readable, but writeable only with valid ownership.
 * - /tasks/{taskId}: Stores tasks assigned to volunteers.
 * - /admins/{adminId}: Stores admin user IDs. Existence in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed for privacy.
 * - Public read access is granted to the `/requests` collection to enable public consumption of request data, but writes are restricted.
 * - Admin privileges are determined by membership in the `/admins` collection.
 *
 * Denormalization for Authorization:
 * - The `victimId` field is included in the `/requests/{requestId}` documents to simplify filtering and authorization.
 * - Admin status is determined by the existence of their `uid` in the `/admins/{adminId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin by verifying their existence in the /admins collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Security rules for the /victims/{victimId} collection.
     * @path /victims/{victimId}
     * @allow (get, create, update, delete) if the user is the owner of the document or an admin.
     * @deny (get, create, update, delete) if the user is not the owner or an admin.
     * @principle Enforces document ownership and admin override.
     */
    match /victims/{victimId} {
      allow get: if isOwner(victimId) || isAdmin();
      allow list: if false; // User listing is disallowed for privacy.
      allow create: if isOwner(victimId);
      allow update: if isExistingOwner(victimId) || isAdmin();
      allow delete: if isExistingOwner(victimId) || isAdmin();
    }

    /**
     * @description Security rules for the /volunteers/{volunteerId} collection.
     * @path /volunteers/{volunteerId}
     * @allow (get, create, update, delete) if the user is the owner of the document or an admin.
     * @deny (get, create, update, delete) if the user is not the owner or an admin.
     * @principle Enforces document ownership and admin override.
     */
    match /volunteers/{volunteerId} {
      allow get: if isOwner(volunteerId) || isAdmin();
      allow list: if false; // User listing is disallowed for privacy.
      allow create: if isOwner(volunteerId);
      allow update: if isExistingOwner(volunteerId) || isAdmin();
      allow delete: if isExistingOwner(volunteerId) || isAdmin();
    }

    /**
     * @description Security rules for the /requests/{requestId} collection.
     * @path /requests/{requestId}
     * @allow (get, list) if true (public read access).
     * @allow (create) if the request.resource.data.victimId matches the authenticated user's UID.
     * @allow (update, delete) if the user is the owner of the document or an admin.
     * @deny (create, update, delete) if ownership cannot be verified.
     * @principle Allows public read access but enforces owner-only writes and relational integrity.
     */
    match /requests/{requestId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.victimId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.victimId) || isAdmin();
      allow delete: if isExistingOwner(resource.data.victimId) || isAdmin();
    }

    /**
     * @description Security rules for the /tasks/{taskId} collection.
     * @path /tasks/{taskId}
     * @allow (get, list) to authenticated users.
     * @allow (create) if the request.resource.data.volunteerId or requestId matches the request.auth.uid
     * @allow (update, delete) if the user is the owner of the task's volunteer or an admin.
     * @deny (create, update, delete) if ownership cannot be verified.
     * @principle Enforces task ownership and admin override.
     */
    match /tasks/{taskId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add additional checks for volunteers to create tasks based on requests
      allow update: if exists(/databases/$(database)/documents/volunteers/$(resource.data.volunteerId)) || isAdmin();
      allow delete: if exists(/databases/$(database)/documents/volunteers/$(resource.data.volunteerId)) || isAdmin();
    }

    /**
     * @description Security rules for the /admins/{adminId} collection.
     * @path /admins/{adminId}
     * @allow get: if isAdmin() || isOwner(adminId);
     * @allow list: if false; // Do not allow listing of admins.
     * @allow create: if false; // Admins can only be created via backend functions.
     * @allow update: if false; // Admins can only be updated via backend functions.
     * @allow delete: if false; // Admins can only be deleted via backend functions.
     * @principle  Restricts modifications to the admin list to server-side logic only.
     */
    match /admins/{adminId} {
        allow get: if isAdmin() || isOwner(adminId);
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}