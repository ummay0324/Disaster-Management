/**
 * @fileoverview Firestore Security Rules for ReliefLink application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership (for profiles),
 * role-based access (for admins), and public read access with owner-only writes
 * for certain collections. It leverages denormalization for authorization
 * to avoid costly `get()` calls and complex rule logic.
 *
 * Data Structure:
 * - /victims/{victimId}: Victim profiles, accessible only by the victim themselves or admins.
 * - /volunteers/{volunteerId}: Volunteer profiles, accessible only by the volunteer themselves or admins.
 * - /requests/{requestId}: Requests for aid, readable by anyone, but writable only by the request's creator (victim).
 * - /tasks/{taskId}: Tasks assigned to volunteers, accessible only by the assigned volunteer or admins.
 * - /admins/{adminId}: A collection of admin user IDs. Presence in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - Admins: Admin privileges are granted by the mere existence of a document in `/admins/{adminId}`. No content is required.
 * - Public Read Access: The `/requests` collection is publicly readable, but writes are restricted to the owner.
 * - No User Listing: Listing of users (victims or volunteers) is not permitted to prevent information leakage.
 * - Ownership: Ownership is enforced via path-based matching (e.g., `/users/{userId}`) and/or document-level `ownerId` fields.
 *
 * Denormalization for Authorization:
 * - The `requests` collection is denormalized with a `victimId` field to easily
 *   identify the request's owner for write operations.
 *
 * Structural Segregation:
 * - Public data (requests) and private user data (victims, volunteers) are stored
 *   in separate top-level collections with different access controls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/(default)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Grants access to victims collection.
     * @path /victims/{victimId}
     * @allow (create) - If the user is creating their own profile (victimId matches auth.uid).
     * @allow (get, update, delete) - If the user is the owner (victimId matches auth.uid) or an admin.
     * @deny (list) - Listing victims is prohibited.
     * @principle Enforces user-ownership for profile data.
     */
    match /victims/{victimId} {
      allow get: if isOwner(victimId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(victimId);
      allow update: if isExistingOwner(victimId) || isAdmin();
      allow delete: if isExistingOwner(victimId) || isAdmin();
    }

    /**
     * @description Grants access to volunteers collection.
     * @path /volunteers/{volunteerId}
     * @allow (create) - If the user is creating their own profile (volunteerId matches auth.uid).
     * @allow (get, update, delete) - If the user is the owner (volunteerId matches auth.uid) or an admin.
     * @deny (list) - Listing volunteers is prohibited.
     * @principle Enforces user-ownership for profile data.
     */
    match /volunteers/{volunteerId} {
      allow get: if isOwner(volunteerId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(volunteerId);
      allow update: if isExistingOwner(volunteerId) || isAdmin();
      allow delete: if isExistingOwner(volunteerId) || isAdmin();
    }

    /**
     * @description Grants access to requests collection.
     * @path /requests/{requestId}
     * @allow (get, list) - Public read access.
     * @allow (create) - If the request includes victimId field matching the user's auth.uid.
     * @allow (update, delete) - If the user is the owner (victimId in resource.data matches auth.uid) or an admin.
     * @principle Allows public read access with owner-only writes.
     */
    match /requests/{requestId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.victimId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.victimId) || isAdmin();
      allow delete: if isExistingOwner(resource.data.victimId) || isAdmin();
    }

    /**
     * @description Grants access to tasks collection.
     * @path /tasks/{taskId}
     * @allow (get) - If the user is the assigned volunteer (volunteerId in resource.data matches auth.uid) or an admin.
     * @allow (list) - No listing of tasks.
     * @allow (create, update, delete) - If the user is an admin.
     * @principle Restricts access to assigned volunteers and admins.
     */
    match /tasks/{taskId} {
      allow get: if isSignedIn() && resource.data.volunteerId == request.auth.uid || isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to admins collection.
     * @path /admins/{adminId}
     * @allow (get, list) - No read access to the admins collection.
     * @allow (create) - If the user creating the admin document has admin rights, and the adminId matches the request.auth.uid.
     * @allow (update, delete) - If the user is an existing admin.
     * @principle Only existing admins can manage other admins.
     */
    match /admins/{adminId} {
      allow get, list: if false;
      allow create: if isAdmin() && request.auth.uid == adminId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Grants access to shelters collection.
      * @path /shelters
      * @allow (get, list) - Anyone can list shelters.
      * @allow (create, update, delete) - Not allowed.
      * @principle Anyone can list shelters.
      */
     match /shelters/{shelterId} {
        allow get, list: if true;
        allow create, update, delete: if false;
     }
  }
}