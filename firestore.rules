/**
 * @fileOverview Security rules for the ReliefLink Firestore database.
 *
 * @description
 * Core Philosophy: This ruleset enforces a user-ownership model for victims and volunteers,
 * with admin override capabilities. Requests and tasks are accessible based on user roles and
 * request status. Admin privileges are granted based on the existence of their UID in the
 * `/admins` collection.
 *
 * Data Structure:
 * - /victims/{victimId}: Stores victim profiles, accessible only by the victim or an admin.
 * - /volunteers/{volunteerId}: Stores volunteer profiles, accessible only by the volunteer or an admin.
 * - /requests/{requestId}: Stores requests for aid.
 * - /tasks/{taskId}: Stores tasks assigned to volunteers.
 * - /admins/{adminId}: Stores admin UIDs. Existence in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - Users can only access their own victim or volunteer profiles.
 * - Listing of users is not permitted, protecting user privacy.
 * - Admins have full read and write access to all data.
 * - Requests are publicly readable but writable only by authorized users/admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the requesting user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Allows anyone to read if `public` is true or requires user to be authenticated
     * @param {boolean} public - indicates if the resource is public
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function canRead(public) {
      return public || isSignedIn();
    }

    /**
     * @description Rules for the /victims/{victimId} collection.
     * @path /victims/{victimId}
     * @allow (get) Authenticated user can retrieve their own victim profile.
     * @allow (create) Authenticated user can create their own victim profile.
     * @allow (update) Authenticated user can update their own victim profile.
     * @allow (delete) Authenticated user can delete their own victim profile.
     * @deny (get) Authenticated user cannot retrieve other victim profiles.
     * @deny (create) Unauthenticated user cannot create a victim profile.
     * @deny (update) Authenticated user cannot update other victim profiles.
     * @deny (delete) Authenticated user cannot delete other victim profiles.
     * @principle Enforces document ownership for reads and writes.
     */
    match /victims/{victimId} {
      allow get: if isOwner(victimId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(victimId) && request.resource.data.id == victimId;
      allow update: if isExistingOwner(victimId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(victimId) || isAdmin();
    }

    /**
     * @description Rules for the /volunteers/{volunteerId} collection.
     * @path /volunteers/{volunteerId}
     * @allow (get) Authenticated user can retrieve their own volunteer profile.
     * @allow (create) Authenticated user can create their own volunteer profile.
     * @allow (update) Authenticated user can update their own volunteer profile.
     * @allow (delete) Authenticated user can delete their own volunteer profile.
     * @deny (get) Authenticated user cannot retrieve other volunteer profiles.
     * @deny (create) Unauthenticated user cannot create a volunteer profile.
     * @deny (update) Authenticated user cannot update other volunteer profiles.
     * @deny (delete) Authenticated user cannot delete other volunteer profiles.
     * @principle Enforces document ownership for reads and writes.
     */
    match /volunteers/{volunteerId} {
      allow get: if isOwner(volunteerId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(volunteerId) && request.resource.data.id == volunteerId;
      allow update: if isExistingOwner(volunteerId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(volunteerId) || isAdmin();
    }

    /**
     * @description Rules for the /requests/{requestId} collection.
     * @path /requests/{requestId}
     * @allow (get) Any signed in user can read request documents.
     * @allow (create) Admins only can create requests.
     * @allow (update) Admins only can update requests.
     * @allow (delete) Admins only can delete requests.
     * @deny (create) Non-admin users can't create requests.
     * @deny (update) Non-admin users can't update requests.
     *
     */
    match /requests/{requestId} {
      allow get: if canRead(true);
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /tasks/{taskId} collection.
     * @path /tasks/{taskId}
     * @allow (get) Any signed in user can read task documents.
     * @allow (create) Admins only can create tasks.
     * @allow (update) Admins only can update tasks.
     * @allow (delete) Admins only can delete tasks.
     * @deny (create) Non-admin users can't create tasks.
     * @deny (update) Non-admin users can't update tasks.
     */
    match /tasks/{taskId} {
      allow get: if canRead(true);
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /admins/{adminId} collection.
     * @path /admins/{adminId}
     * @allow (get) Only admins can read admin documents.
     * @allow (create) Only admins can create admin documents.
     * @allow (update) Only admins can update admin documents.
     * @allow (delete) Only admins can delete admin documents.
     * @deny (create) Non-admin users can't create admin documents.
     * @deny (update) Non-admin users can't update admin documents.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin() && request.auth.uid == adminId;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /shelters collection.  The reported error indicates that this collection exists and is being listed, 
     * but it is not defined in the provided schema.  Because we don't know the intended authorization model, we must deny access to it.
     * @path /shelters
     * @deny (list) Listing shelters is denied because the collection has no authorization rules defined.
     */
    match /shelters/{shelterId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}