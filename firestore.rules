/**
 * @file Firestore Security Rules
 * @description This ruleset implements a role-based access control system with an admin override.
 *
 * Core Philosophy:
 *  - Access to alerts is restricted: only logged-in users can read, and only admins can create, update, or delete.
 *  - The `admins` collection determines admin privileges via document existence.
 *
 * Data Structure:
 *  - Alerts are stored in a flat `/alerts/{alertId}` collection.
 *  - Admin status is determined by the existence of a document in the `/admins/{adminId}` collection, where `{adminId}` is the user's UID.
 *
 * Key Security Decisions:
 *  - Listing alerts is allowed for any signed-in user, providing broad read access.
 *  - Write access to alerts is strictly limited to admins, ensuring data integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Requires authentication for certain actions.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of their UID in the /admins collection.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Uses existence over content for determining admin privileges.
     */
    function isAdmin() {
      return exists(/databases/(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Manages access to alerts. Any logged-in user can read alerts, but only admins can create, update, or delete them.
     * @path /alerts/{alertId}
     * @allow (get, list) - Any signed-in user can read alerts.
     * @allow (create) - An admin can create a new alert.
     * @allow (update, delete) - An admin can update or delete an existing alert.
     * @deny (create, update, delete) - A non-admin user cannot create, update, or delete alerts.
     * @principle Enforces role-based access control, restricting write access to admins.
     */
    match /alerts/{alertId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}