/**
 * @fileOverview
 * This ruleset enforces a role-based access control model for the ReliefLink application.
 *
 * Data Structure:
 * - /victims/{victimId}: Stores victim profiles, accessible only by the victim or an admin.
 * - /volunteers/{volunteerId}: Stores volunteer profiles, accessible only by the volunteer or an admin.
 * - /requests/{requestId}: Stores requests for aid, accessible by admins, and victims who owns the request.
 * - /tasks/{taskId}: Stores tasks assigned to volunteers, accessible to admins, and volunteers whom the task is assigned.
 * - /admins/{adminId}: Stores admin UIDs. Existence grants admin privileges.
 *
 * Key Security Decisions:
 * - Strict user-ownership for victim and volunteer profiles.
 * - Admins have broad read and write access to all collections.
 * - The 'alerts' collection which the original error was from is not defined.  Access to it is denied.
 *
 * Denormalization for Authorization:
 * - Role information is not stored in separate collections.
 *
 * Structural Segregation:
 * - No segregation is explicitly used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     * @param {string} userId The user ID to check against.
     * @returns {boolean} True if the user is an existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Defines the behavior for unauthorized paths.
     * @path /alerts
     * @allow (list) User with UID zkqCoL7pLONcS4tHizfFPYULNLz1 attempts to list alerts.
     * @deny (list) User with UID zkqCoL7pLONcS4tHizfFPYULNLz1 is denied access.
     * @principle Explicitly deny access to undefined paths to enforce least privilege.
     */
    match /alerts {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Manages access to victim profiles. Only the victim or an admin can read/write.
     * @path /victims/{victimId}
     * @allow (get) Victim with UID 'user123' reads their own profile.
     * @allow (create) Victim with UID 'user123' creates their own profile.
     * @deny (update) Victim with UID 'user456' attempts to update victim with UID 'user123' profile.
     * @principle Enforces document ownership for writes, admins bypass ownership.
     */
    match /victims/{victimId} {
      allow get: if isOwner(victimId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(victimId) && request.resource.data.id == victimId;
      allow update: if isExistingOwner(victimId) || isAdmin();
      allow delete: if isExistingOwner(victimId) || isAdmin();
    }

    /**
     * @description Manages access to volunteer profiles. Only the volunteer or an admin can read/write.
     * @path /volunteers/{volunteerId}
     * @allow (get) Volunteer with UID 'volunteer456' reads their own profile.
     * @allow (create) Volunteer with UID 'volunteer456' creates their own profile.
     * @deny (update) Volunteer with UID 'volunteer789' attempts to update volunteer with UID 'volunteer456' profile.
     * @principle Enforces document ownership for writes, admins bypass ownership.
     */
    match /volunteers/{volunteerId} {
      allow get: if isOwner(volunteerId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(volunteerId) && request.resource.data.id == volunteerId;
      allow update: if isExistingOwner(volunteerId) || isAdmin();
      allow delete: if isExistingOwner(volunteerId) || isAdmin();
    }

    /**
     * @description Manages access to requests. Admins can read/write all requests. Victims can only read their own requests.
     * @path /requests/{requestId}
     * @allow (get) Admin reads any request.
     * @allow (create) Admin creates a request.
     * @deny (update) Non-admin attempts to update a request they don't own.
     * @principle Admins have full access, victims have limited access to their own requests.
     */
    match /requests/{requestId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages access to tasks. Admins can read/write all tasks. Volunteers can only read tasks assigned to them.
     * @path /tasks/{taskId}
     * @allow (get) Admin reads any task.
     * @allow (create) Admin creates a task.
     * @deny (update) Non-admin attempts to update a task they don't own.
     * @principle Admins have full access, volunteers have limited access to their own tasks.
     */
    match /tasks/{taskId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages access to admin profiles. Only admins can create/delete other admins.
     * @path /admins/{adminId}
     * @allow (get) Admin reads admin profile.
     * @allow (create) Admin creates a new admin profile.
     * @deny (delete) Non-admin attempts to delete an admin profile.
     * @principle Restricts admin management to existing admins.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin() && request.auth.uid == adminId;
      allow update: if false;
      allow delete: if isAdmin();
    }
  }
}