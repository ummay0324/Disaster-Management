/**
 * @file Firebase Security Rules for ReliefLink Firestore database.
 *
 * @corePhilosophy This ruleset enforces a role-based access control model, where admins have broad access and authenticated users (volunteers, victims) have read access to alerts.
 * @dataStructure Data is organized into top-level collections for 'alerts', 'victims', 'volunteers', 'requests', and 'admins'.
 * @keySecurityDecisions Access to create/modify/delete alerts is restricted to admins only. Read access to alerts is granted to any authenticated user. Admin status is determined by the existence of a document in the `/admins/{adminId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read access to all authenticated users and restricts write access to admins.
     * @path /alerts/{alertId}
     * @allow (get, list) - Any signed-in user can read alerts.
     * @allow (create) - An admin can create new alerts.
     * @allow (update, delete) - An admin can modify or delete existing alerts.
     * @deny (create) - A non-admin user cannot create alerts.
     * @deny (update, delete) - A non-admin user cannot modify or delete alerts.
     * @principle Enforces role-based access control (admin vs. authenticated user) for alerts.
     */
    match /alerts/{alertId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Allows the owner to read, create, update, and delete their own victim profile.
     * @path /victims/{victimId}
     * @allow (create) - A user can create their own victim profile if the ID matches their auth UID.
     * @allow (get, list) - A user can read their own victim profile if the ID matches their auth UID.
     * @allow (update, delete) - A user can update or delete their own victim profile if the ID matches their auth UID and the document exists.
     * @deny (create) - A user cannot create a victim profile with an ID that doesn't match their auth UID.
     * @deny (update, delete) - A user cannot update or delete a victim profile with an ID that doesn't match their auth UID.
     * @principle Enforces document ownership for victim profiles.
     */
    match /victims/{victimId} {
      allow get, list: if isOwner(victimId);
      allow create: if isOwner(victimId);
      allow update, delete: if isOwner(victimId);
    }

    /**
     * @description Allows the owner to read, create, update, and delete their own volunteer profile.
     * @path /volunteers/{volunteerId}
     * @allow (create) - A user can create their own volunteer profile if the ID matches their auth UID.
     * @allow (get, list) - A user can read their own volunteer profile if the ID matches their auth UID.
     * @allow (update, delete) - A user can update or delete their own volunteer profile if the ID matches their auth UID and the document exists.
     * @deny (create) - A user cannot create a volunteer profile with an ID that doesn't match their auth UID.
     * @deny (update, delete) - A user cannot update or delete a volunteer profile with an ID that doesn't match their auth UID.
     * @principle Enforces document ownership for volunteer profiles.
     */
    match /volunteers/{volunteerId} {
      allow get, list: if isOwner(volunteerId);
      allow create: if isOwner(volunteerId);
      allow update, delete: if isOwner(volunteerId);
    }

    /**
     * @description Allows read and write access to requests, but only if the user is authenticated.
     * @path /requests/{requestId}
     * @allow (get, list) - Any authenticated user can read requests.
     * @allow (create) - Any authenticated user can create requests.
     * @allow (update, delete) - Any authenticated user can update or delete requests if the document exists.
     * @principle Allows authenticated users to manage requests.
     */
    match /requests/{requestId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to tasks for authenticated users.
     * @path /tasks/{taskId}
     * @allow (get, list) - Any authenticated user can read tasks.
     * @allow (create) - Any authenticated user can create tasks.
     * @allow (update, delete) - Any authenticated user can update or delete tasks if the document exists.
     * @principle Allows authenticated users to manage tasks.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows admins to read, create, update, and delete their own admin profile.  Other users cannot access the admin collection.
     * @path /admins/{adminId}
     * @allow (get, list) - Only an admin can read their own admin profile.
     * @allow (create) - Only an admin can create their own admin profile if the ID matches their auth UID.
     * @allow (update, delete) - Only an admin can update or delete their own admin profile if the ID matches their auth UID and the document exists.
     * @deny (create, update, delete) - Non-admin users cannot create, update or delete admin profiles.
     * @principle Enforces strict access control for admin profiles.  Existence confers admin priviledges.
     */
    match /admins/{adminId} {
      allow get, list: if isAdmin() ;
      allow create: if request.auth.uid == adminId;
      allow update, delete: if request.auth.uid == adminId && isAdmin();
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document based on the provided userId.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of the document based on the provided userId and confirms the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  // Helper function to determine if the user is an admin by checking if their UID exists as a document ID in the /admins collection.
  function isAdmin() {
    return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
  }

   // Helper function to determine if the user is an admin by checking if their UID exists as a document ID in the /admins collection and confirms the document exists.
   function isExistingAdmin(adminId) {
    return isAdmin() && resource != null;
  }
}