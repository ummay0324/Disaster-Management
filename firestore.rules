/**
 * @file Firestore Security Rules for ReliefLink
 * @description This ruleset enforces a strict user-ownership model for victims and volunteers,
 *              restricts access to requests and tasks based on user roles and relationships,
 *              and provides admin privileges based on admin collection membership.
 *
 * Data Structure:
 * - /victims/{victimId}: Stores victim profiles, accessible only by the victim or an admin.
 * - /volunteers/{volunteerId}: Stores volunteer profiles, accessible only by the volunteer or an admin.
 * - /requests/{requestId}: Stores requests for aid, accessible based on the request's status and associated victim.
 * - /tasks/{taskId}: Stores tasks assigned to volunteers, accessible based on the task's status and associated volunteer.
 * - /admins/{adminId}: Stores admin UIDs. Existence in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - Strict ownership for victim and volunteer profiles.
 * - Admin privileges granted based on admin collection membership.
 * - Authorization independence is achieved by including relevant user roles or permissions directly within documents.
 * - No public listing of any collection is allowed.
 *
 * Denormalization for Authorization:
 * - The 'status' field is included directly within the request, simplifying security rules and enabling status-based filtering.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Defines rules for the /victims/{victimId} collection.
     * @path /victims/{victimId}
     * @allow (create) User with UID 'user123' can create their own victim profile.
     *        request.auth.uid = 'user123', request.resource.data.id = 'user123'
     * @allow (get) User with UID 'user123' can read their own victim profile.
     *        request.auth.uid = 'user123', victimId = 'user123'
     * @deny (create) User with UID 'user456' cannot create a victim profile for 'user123'.
     *       request.auth.uid = 'user456', request.resource.data.id = 'user123'
     * @deny (get) User with UID 'user456' cannot read the victim profile of 'user123'.
     *       request.auth.uid = 'user456', victimId = 'user123'
     * @principle Enforces document ownership for reads and writes, ensuring only the victim or an admin can access the data.
     */
    match /victims/{victimId} {
      // Read rules
      allow get: if isOwner(victimId) || isAdmin();
      allow list: if false;

      // Write rules
      allow create: if isOwner(victimId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(victimId) || isAdmin();
      allow delete: if isExistingOwner(victimId) || isAdmin();
    }

    /**
     * @description Defines rules for the /volunteers/{volunteerId} collection.
     * @path /volunteers/{volunteerId}
     * @allow (create) User with UID 'user123' can create their own volunteer profile.
     *        request.auth.uid = 'user123', request.resource.data.id = 'user123'
     * @allow (get) User with UID 'user123' can read their own volunteer profile.
     *        request.auth.uid = 'user123', volunteerId = 'user123'
     * @deny (create) User with UID 'user456' cannot create a volunteer profile for 'user123'.
     *       request.auth.uid = 'user456', request.resource.data.id = 'user123'
     * @deny (get) User with UID 'user456' cannot read the volunteer profile of 'user123'.
     *       request.auth.uid = 'user456', volunteerId = 'user123'
     * @principle Enforces document ownership for reads and writes, ensuring only the volunteer or an admin can access the data.
     */
    match /volunteers/{volunteerId} {
      // Read rules
      allow get: if isOwner(volunteerId) || isAdmin();
      allow list: if false;

      // Write rules
      allow create: if isOwner(volunteerId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(volunteerId) || isAdmin();
      allow delete: if isExistingOwner(volunteerId) || isAdmin();
    }

    /**
     * @description Defines rules for the /requests/{requestId} collection.
     * @path /requests/{requestId}
     * @allow (get) Any signed-in user can read a request.
     *        request.auth.uid = 'user123', requestId = 'request123'
     * @allow (create) Any signed-in user can create a request.
     *        request.auth.uid = 'user123'
     * @deny (list) No one is allowed to list requests.
     *        request.auth.uid = 'user123'
     * @deny (update) Non-admins cannot update requests.
     *        request.auth.uid = 'user123'
     * @principle Allows public read access but restricts write access to admins.
     */
    match /requests/{requestId} {
      // Read rules
      allow get: if isSignedIn() || isAdmin();
      allow list: if false;

      // Write rules
      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines rules for the /tasks/{taskId} collection.
     * @path /tasks/{taskId}
     * @allow (get) Any signed-in user can read a task.
     *        request.auth.uid = 'user123', taskId = 'task123'
     * @allow (create) Only admins can create tasks.
     *        request.auth.uid = 'admin123' and /admins/admin123 exists
     * @deny (list) No one can list tasks.
     * @deny (update) Non-admins cannot update tasks.
     *        request.auth.uid = 'user123'
     * @principle Restricts read access based on membership and write access to admins only.
     */
    match /tasks/{taskId} {
      // Read rules
      allow get: if isSignedIn() || isAdmin();
      allow list: if false;

      // Write rules
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines rules for the /admins/{adminId} collection.
     * @path /admins/{adminId}
     * @allow (get) Only the admin themselves can read their own admin profile.
     *        request.auth.uid = 'admin123', adminId = 'admin123'
     * @allow (create) Only the admin themselves can create their own admin profile.
     *        request.auth.uid = 'admin123', adminId = 'admin123'
     * @deny (list) Listing admins is not allowed.
     * @deny (update) Only the admin themselves can update their own admin profile.
     * @principle Restricts access to admin profiles to the admin themselves, preventing unauthorized modification of admin privileges.
     */
    match /admins/{adminId} {
      // Read rules
      allow get: if isOwner(adminId) || isAdmin();
      allow list: if false;

      // Write rules
      allow create: if isOwner(adminId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(adminId) || isAdmin();
      allow delete: if isExistingOwner(adminId) || isAdmin();
    }

    /**
     * @description Defines rules for the /shelters collection.
     * @path /shelters
     * @allow (get) Any signed-in user can read a shelter.
     *        request.auth.uid = 'user123'
     * @allow (list) Any signed-in user can list shelters.
     *        request.auth.uid = 'user123'
     * @deny (create) No one can create shelters.
     *        request.auth.uid = 'user123'
     * @deny (update) No one can update shelters.
     *        request.auth.uid = 'user123'
     *  @deny (delete) No one can delete shelters.
     *        request.auth.uid = 'user123'
     * @principle Allows public read access but restricts write access to admins only.
     */
    match /shelters/{shelterId} {
      // Read rules
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();

      // Write rules
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}