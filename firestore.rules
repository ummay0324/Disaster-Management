/**
 * @fileOverview Firestore Security Rules for ReliefLink application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for victims and volunteers,
 * with admin overrides. It leverages path-based authorization and denormalization
 * for efficient and secure data access.
 *
 * Data Structure:
 * - /victims/{victimId}: Stores victim profiles, accessible only by the victim or an admin.
 * - /volunteers/{volunteerId}: Stores volunteer profiles, accessible only by the volunteer or an admin.
 * - /requests/{requestId}: Stores aid requests, accessible to admins, and the owner of the request.
 * - /tasks/{taskId}: Stores tasks assigned to volunteers, accessible to admins, and the owner of the task.
 * - /admins/{adminId}: Stores admin UIDs. Existence in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - Listing of victims and volunteers is disallowed for non-admins to protect user privacy.
 * - Public read access is not granted to any collection.
 * - Data validation is minimized in the prototyping phase to allow for rapid schema iteration.
 * - Authorization is prioritized over complete data validation in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - The `requests` collection contains a `victimId` field to simplify request retrieval by victims and to enable admin access, as well as a `status` field.
 * - The `tasks` collection contains `requestId` and `volunteerId` to link tasks to requests and volunteers.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document based on the provided userId.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

        /**
         * @description Checks if the current user exists in the admins collection.
         * @returns {boolean} True if the user is an admin, false otherwise.
         */
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
    /**
     * @description Checks if the user is the owner of an existing document.
     *              It combines the `isOwner` check with a resource existence check.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Security rules for the /victims/{victimId} collection.
     * @path /victims/{victimId}
     * @allow (create) If the user is creating their own victim profile (victimId matches auth.uid).
     * @allow (get, update, delete) If the user is the owner of the victim profile or an admin.
     * @deny (list) Listing victims is not allowed.
     * @deny (create) If the victimId does not match the auth.uid of the requesting user.
     * @principle Enforces document ownership for reads and writes.
     */
    match /victims/{victimId} {
      allow get: if isOwner(victimId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(victimId);
      allow update: if isExistingOwner(victimId) || isAdmin();
      allow delete: if isExistingOwner(victimId) || isAdmin();
    }

    /**
     * @description Security rules for the /volunteers/{volunteerId} collection.
     * @path /volunteers/{volunteerId}
     * @allow (create) If the user is creating their own volunteer profile (volunteerId matches auth.uid).
     * @allow (get, update, delete) If the user is the owner of the volunteer profile or an admin.
     * @deny (list) Listing volunteers is not allowed.
     * @deny (create) If the volunteerId does not match the auth.uid of the requesting user.
     * @principle Enforces document ownership for reads and writes.
     */
    match /volunteers/{volunteerId} {
      allow get: if isOwner(volunteerId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(volunteerId);
      allow update: if isExistingOwner(volunteerId) || isAdmin();
      allow delete: if isExistingOwner(volunteerId) || isAdmin();
    }

    /**
     * @description Security rules for the /requests/{requestId} collection.
     * @path /requests/{requestId}
     * @allow (get, list) If true - Public read access.
     * @allow (create) If the request contains victimId matching auth.uid.
     * @allow (update, delete) If the request's victimId matches auth.uid and the document exists, or if the user is an admin.
     * @deny (create) If the request does not contain victimId matching auth.uid.
     * @principle Allows public reads, but restricts writes to the owner or admins.
     */
    match /requests/{requestId} {
      allow get, list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.victimId == request.auth.uid;
      allow update: if (resource.data.victimId == request.auth.uid && resource != null) || isAdmin();
      allow delete: if (resource.data.victimId == request.auth.uid && resource != null) || isAdmin();
    }

    /**
     * @description Security rules for the /tasks/{taskId} collection.
     * @path /tasks/{taskId}
     * @allow (get, list) If true - Public read access.
     * @allow (create) Always deny.
     * @allow (update, delete) If the document exists and the user is an admin.
     * @deny (create) Always deny.
     * @principle Allows public reads, but restricts writes to admins.
     */
    match /tasks/{taskId} {
      allow get, list: if isAdmin();
      allow create: if false;
      allow update: if resource != null && isAdmin();
      allow delete: if resource != null && isAdmin();
    }

    /**
     * @description Security rules for the /admins/{adminId} collection.
     * @path /admins/{adminId}
     * @allow (get) If the adminId matches the authenticated user's UID.
     * @allow (create) If the adminId matches the authenticated user's UID and the user is already an admin.
     * @allow (update, delete) Always deny. Admin management should be done via a secure backend.
     * @deny (list) Listing admins is not allowed.
     * @principle Restricts admin creation to existing admins, and prohibits modification/deletion via client.
     */
    match /admins/{adminId} {
      allow get: if isOwner(adminId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(adminId) && isAdmin();
      allow update: if false;
      allow delete: if false;
    }
      /**
       * @description Security rules for the /shelters collection.
       * @path /shelters
       * @allow (get, list) Public access.
       * @allow (create, update, delete) Always deny.
       * @principle Allows public reads. No write access.
       */
      match /shelters {
        allow get, list: if true;
        allow create, update, delete: if false;
      }
  }
}