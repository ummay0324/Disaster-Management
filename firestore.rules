/**
 * @fileoverview Firestore Security Rules for ReliefLink application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for victims and volunteers,
 * with an additional admin role for elevated privileges. Authorization independence
 * is achieved through denormalization, embedding authorization-relevant data
 * (like user IDs and status fields) directly into the documents.
 *
 * Data Structure:
 * - /victims/{victimId}: Stores victim profiles, accessible only to the victim and admins.
 * - /volunteers/{volunteerId}: Stores volunteer profiles, accessible only to the volunteer and admins.
 * - /requests/{requestId}: Stores requests for aid. Accessible by the victim who created the request and admins.
 * - /tasks/{taskId}: Stores tasks assigned to volunteers.
 * - /admins/{adminId}: Stores admin UIDs. Existence in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - Victims and volunteers can only access their own profiles.
 * - Admins have read and write access to all victims, volunteers, requests, and tasks.
 * - The `list` operation is denied for admins to avoid accidental data exposure.
 * - Data validation is limited to fields essential for authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - The `requests` collection includes the `victimId` field to simplify filtering and authorization.
 * - The `tasks` collection includes `requestId` and `volunteerId` to link to corresponding requests and volunteers.
 *
 * Structural Segregation:
 * - Admins are managed in a separate `/admins` collection, using existence checks to grant admin privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @param {void} - No parameters.
     * @return {boolean} - True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} - True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

        /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the resource's user ID.
     * @return {boolean} - True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user is an admin by verifying their UID exists in the /admins collection.
     * @return {boolean} - True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Defines a match statement for documents in the /victims/{victimId} collection.
     * @path /victims/{victimId}
     * @allow (get) - Authenticated user can read their own victim profile.
     * @allow (create) - Authenticated user can create their own victim profile.
     * @allow (update) - Authenticated user can update their own victim profile.
     * @allow (delete) - Authenticated user can delete their own victim profile.
     * @deny (get) - Unauthenticated user cannot read any victim profile.
     * @deny (create) - Unauthenticated user cannot create any victim profile.
     * @deny (update) - Authenticated user cannot update a victim profile they don't own.
     * @deny (delete) - Authenticated user cannot delete a victim profile they don't own.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /victims/{victimId} {
      allow get: if isOwner(victimId) || isAdmin();
      allow list: if false; // Prevent listing all victims

      allow create: if isOwner(victimId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(victimId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(victimId) || isAdmin();
    }

    /**
     * @description Defines a match statement for documents in the /volunteers/{volunteerId} collection.
     * @path /volunteers/{volunteerId}
     * @allow (get) - Authenticated user can read their own volunteer profile.
     * @allow (create) - Authenticated user can create their own volunteer profile.
     * @allow (update) - Authenticated user can update their own volunteer profile.
     * @allow (delete) - Authenticated user can delete their own volunteer profile.
     * @deny (get) - Unauthenticated user cannot read any volunteer profile.
     * @deny (create) - Unauthenticated user cannot create any volunteer profile.
     * @deny (update) - Authenticated user cannot update a volunteer profile they don't own.
     * @deny (delete) - Authenticated user cannot delete a volunteer profile they don't own.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /volunteers/{volunteerId} {
      allow get: if isOwner(volunteerId) || isAdmin();
      allow list: if false; // Prevent listing all volunteers

      allow create: if isOwner(volunteerId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(volunteerId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(volunteerId) || isAdmin();
    }

    /**
     * @description Defines a match statement for documents in the /requests/{requestId} collection.
     * @path /requests/{requestId}
     * @allow (get) - Authenticated user can read a specific request.
     * @allow (create) - Authenticated user can create a request.
     * @allow (update) - Authenticated user can update a request if they are the owner or an admin.
     * @allow (delete) - Authenticated user can delete a request if they are the owner or an admin.
     * @deny (get) - Unauthenticated user cannot read any request.
     * @deny (create) - Unauthenticated user cannot create a request if not authenticated.
     * @deny (update) - Unauthenticated user cannot update any request.
     * @deny (delete) - Unauthenticated user cannot delete any request.
     * @principle Enforces document ownership for writes, restricts access based on ownership or admin role.
     */
    match /requests/{requestId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();

      allow create: if isSignedIn();
      allow update: if (resource.data.victimId == request.auth.uid && resource != null) || isAdmin();
      allow delete: if (resource.data.victimId == request.auth.uid && resource != null) || isAdmin();
    }

    /**
     * @description Defines a match statement for documents in the /tasks/{taskId} collection.
     * @path /tasks/{taskId}
     * @allow (get) - Authenticated user can read a specific task.
     * @allow (create) - Authenticated user can create a task.
     * @allow (update) - Authenticated user can update a task if they are an admin.
     * @allow (delete) - Authenticated user can delete a task if they are an admin.
     * @deny (get) - Unauthenticated user cannot read any task.
     * @deny (create) - Unauthenticated user cannot create a task if not authenticated.
     * @deny (update) - Unauthenticated user cannot update any task if not an admin.
     * @deny (delete) - Unauthenticated user cannot delete any task if not an admin.
     */
    match /tasks/{taskId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();

      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines a match statement for documents in the /admins/{adminId} collection.
     * @path /admins/{adminId}
     * @allow (get) - Only an admin can read their own admin profile.
     * @allow (create) - Only an admin can create their own admin profile.
     * @allow (update) - Only an admin can update their own admin profile.
     * @allow (delete) - Only an admin can delete their own admin profile.
     * @deny (get) - Non-admins cannot read admin profiles.
     * @deny (create) - Non-admins cannot create admin profiles.
     * @deny (update) - Non-admins cannot update admin profiles.
     * @deny (delete) - Non-admins cannot delete admin profiles.
     * @principle Restricts access to admin profiles to only admins.
     */
    match /admins/{adminId} {
      allow get: if isOwner(adminId) && isAdmin();
      allow list: if false; // Prevent listing all admins

      allow create: if isOwner(adminId);
      allow update: if isOwner(adminId) && isAdmin() && resource != null;
      allow delete: if isOwner(adminId) && isAdmin() && resource != null;
    }
  }
}