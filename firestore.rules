/**
 * @fileoverview Firestore Security Rules for ReliefLink application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for victims and volunteers,
 * with admin overrides. It leverages path-based authorization and denormalization
 * for efficient and secure data access.
 *
 * Data Structure:
 * - /victims/{victimId}: Stores victim profiles, accessible only by the victim or an admin.
 * - /volunteers/{volunteerId}: Stores volunteer profiles, accessible only by the volunteer or an admin.
 * - /requests/{requestId}: Stores requests for aid, with access control based on the victimId and request status.
 * - /tasks/{taskId}: Stores tasks assigned to volunteers, linked to requests and volunteers.
 * - /admins/{adminId}: Stores admin UIDs; existence grants admin privileges.
 *
 * Key Security Decisions:
 * - Victims and volunteers can only access their own profiles.
 * - Admins have full access to all victim, volunteer, request, and task data.
 * - Listing of all documents in the victims, volunteers, tasks, and requests collections is disallowed to prevent information leakage.
 *
 * Denormalization for Authorization:
 * - The `status` field in the `/requests/{requestId}` document simplifies access control based on the request's state, avoiding complex lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines if the current user is signed in
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines if the current user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /***************** Victims *****************/

    /**
     * @description Allows victims to manage their own profiles and admins to manage all profiles.
     * @path /victims/{victimId}
     * @allow (get) User 'victim_abc' can read their own profile at /victims/victim_abc when authenticated.
     * @allow (create) User 'victim_abc' can create their own profile at /victims/victim_abc when authenticated.
     * @allow (update) User 'victim_abc' can update their own profile at /victims/victim_abc when authenticated.
     * @allow (delete) User 'victim_abc' can delete their own profile at /victims/victim_abc when authenticated.
     * @allow (get) Admin 'admin_xyz' can read victim profile at /victims/victim_abc when authenticated.
     * @deny (get) User 'victim_def' cannot read profile of 'victim_abc' at /victims/victim_abc when authenticated.
     * @deny (create) User 'victim_def' cannot create profile of 'victim_abc' at /victims/victim_abc when authenticated.
     * @deny (update) User 'victim_def' cannot update profile of 'victim_abc' at /victims/victim_abc when authenticated.
     * @deny (delete) User 'victim_def' cannot delete profile of 'victim_abc' at /victims/victim_abc when authenticated.
     * @principle Enforces document ownership for writes, admin override.
     */
    match /victims/{victimId} {
      allow get: if isSignedIn() && (isOwner(victimId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(victimId) && request.resource.data.id == victimId;
      allow update: if isSignedIn() && (isExistingOwner(victimId) || isAdmin()) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && (isExistingOwner(victimId) || isAdmin());
    }

    /***************** Volunteers *****************/

    /**
     * @description Allows volunteers to manage their own profiles and admins to manage all profiles.
     * @path /volunteers/{volunteerId}
     * @allow (get) User 'volunteer_abc' can read their own profile at /volunteers/volunteer_abc when authenticated.
     * @allow (create) User 'volunteer_abc' can create their own profile at /volunteers/volunteer_abc when authenticated.
     * @allow (update) User 'volunteer_abc' can update their own profile at /volunteers/volunteer_abc when authenticated.
     * @allow (delete) User 'volunteer_abc' can delete their own profile at /volunteers/volunteer_abc when authenticated.
     * @allow (get) Admin 'admin_xyz' can read volunteer profile at /volunteers/volunteer_abc when authenticated.
     * @deny (get) User 'volunteer_def' cannot read profile of 'volunteer_abc' at /volunteers/volunteer_abc when authenticated.
     * @deny (create) User 'volunteer_def' cannot create profile of 'volunteer_abc' at /volunteers/volunteer_abc when authenticated.
     * @deny (update) User 'volunteer_def' cannot update profile of 'volunteer_abc' at /volunteers/volunteer_abc when authenticated.
     * @deny (delete) User 'volunteer_def' cannot delete profile of 'volunteer_abc' at /volunteers/volunteer_abc when authenticated.
     * @principle Enforces document ownership for writes, admin override.
     */
    match /volunteers/{volunteerId} {
      allow get: if isSignedIn() && (isOwner(volunteerId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(volunteerId) && request.resource.data.id == volunteerId;
      allow update: if isSignedIn() && (isExistingOwner(volunteerId) || isAdmin()) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && (isExistingOwner(volunteerId) || isAdmin());
    }

    /***************** Requests *****************/

    /**
     * @description Allows admins to manage requests. Victims can create requests, but not modify them after creation.
     * @path /requests/{requestId}
     * @allow (create) Victim 'victim_abc' can create a request at /requests/request_xyz when authenticated.
     * @allow (get) Admin 'admin_xyz' can read request at /requests/request_xyz when authenticated.
     * @allow (update) Admin 'admin_xyz' can update request at /requests/request_xyz when authenticated.
     * @allow (delete) Admin 'admin_xyz' can delete request at /requests/request_xyz when authenticated.
     * @deny (get) Victim 'victim_abc' cannot read request at /requests/request_xyz when authenticated.
     * @deny (update) Victim 'victim_abc' cannot update request at /requests/request_xyz when authenticated.
     * @deny (delete) Victim 'victim_abc' cannot delete request at /requests/request_xyz when authenticated.
     * @principle Admins have full control over requests; victims can only create.
     */
    match /requests/{requestId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.victimId;
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /***************** Tasks *****************/

    /**
     * @description Allows admins to manage tasks.
     * @path /tasks/{taskId}
     * @allow (get) Admin 'admin_xyz' can read task at /tasks/task_xyz when authenticated.
     * @allow (create) Admin 'admin_xyz' can create a task at /tasks/task_xyz when authenticated.
     * @allow (update) Admin 'admin_xyz' can update task at /tasks/task_xyz when authenticated.
     * @allow (delete) Admin 'admin_xyz' can delete task at /tasks/task_xyz when authenticated.
     * @deny (get) Victim 'victim_abc' cannot read task at /tasks/task_xyz when authenticated.
     * @deny (create) Victim 'victim_abc' cannot create task at /tasks/task_xyz when authenticated.
     * @deny (update) Victim 'victim_abc' cannot update task at /tasks/task_xyz when authenticated.
     * @deny (delete) Victim 'victim_abc' cannot delete task at /tasks/task_xyz when authenticated.
     * @principle Admins have full control over tasks.
     */
    match /tasks/{taskId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /***************** Admins *****************/

    /**
     * @description Allows only existing admins to read admin profiles. Only admins can create new admin profiles.
     * @path /admins/{adminId}
     * @allow (get) Admin 'admin_abc' can read their own profile at /admins/admin_abc when authenticated.
     * @allow (create) Admin 'admin_abc' can create their own profile at /admins/admin_abc when authenticated.
     * @deny (get) User 'victim_abc' cannot read admin profile at /admins/admin_xyz when authenticated.
     * @deny (create) User 'victim_abc' cannot create admin profile at /admins/admin_xyz when authenticated.
     * @principle Only admins can manage the admin list.
     */
    match /admins/{adminId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin() && request.resource.data.id == adminId;
      allow update: if false;
      allow delete: if false;
    }
  }
}