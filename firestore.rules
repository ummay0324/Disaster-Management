/**
 * @file Firebase Security Rules for ReliefLink Firestore.
 *
 * @description This ruleset enforces a user-ownership model for victims and volunteers,
 * with admin override capabilities. It leverages authorization independence by
 * embedding authorization-relevant data directly into documents, minimizing the need
 * for complex lookups.
 *
 * @dataStructure
 * - /victims/{victimId}: Stores victim profiles, accessible only by the victim or an admin.
 * - /volunteers/{volunteerId}: Stores volunteer profiles, accessible only by the volunteer or an admin.
 * - /requests/{requestId}: Stores requests, with access control based on the victimId or admin status.
 * - /tasks/{taskId}: Stores tasks, with access control based on the volunteerId or admin status.
 * - /admins/{adminId}: Collection containing admin UIDs. Presence grants admin privileges.
 *
 * @keySecurityDecisions
 * - Victims and Volunteers can only access their own profiles.
 * - Admins can read and write all data.
 * - Listing of all users is disallowed for privacy reasons.
 * - Authorization is performed by checking the authenticated user's ID against
 *   the document's owner ID or by verifying admin status.
 *
 * @denormalizationForAuthorization
 * - Requests includes `victimId` to allow easy filtering and authorization based on the requesting victim.
 * - Tasks includes `volunteerId` to allow easy authorization for volunteers.
 * - Admin status is determined by the existence of a document in the `/admins/{adminId}` collection.
 *
 * @structuralSegregation
 * - No explicit structural segregation is used in this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Checks if the requesting user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the existing resource.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for the /victims/{victimId} collection.
     * @path /victims/{victimId}
     * @allow (get, update, delete) if request.auth.uid == victimId || isAdmin();
     * @allow (create) if request.auth.uid == request.resource.data.id;
     * @deny (get, update, delete) if request.auth.uid != victimId && !isAdmin();
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /victims/{victimId} {
      // Read rules
      allow get: if isOwner(victimId) || isAdmin();
      allow list: if false;

      // Write rules
      allow create: if isOwner(victimId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(victimId) || isAdmin();
      allow delete: if isExistingOwner(victimId) || isAdmin();
    }

    /**
     * @description Defines rules for the /volunteers/{volunteerId} collection.
     * @path /volunteers/{volunteerId}
     * @allow (get, update, delete) if request.auth.uid == volunteerId || isAdmin();
     * @allow (create) if request.auth.uid == request.resource.data.id;
     * @deny (get, update, delete) if request.auth.uid != volunteerId && !isAdmin();
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /volunteers/{volunteerId} {
      // Read rules
      allow get: if isOwner(volunteerId) || isAdmin();
      allow list: if false;

      // Write rules
      allow create: if isOwner(volunteerId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(volunteerId) || isAdmin();
      allow delete: if isExistingOwner(volunteerId) || isAdmin();
    }

    /**
     * @description Defines rules for the /requests/{requestId} collection.
     * @path /requests/{requestId}
     * @allow (get, list, create, update, delete) if isAdmin();
     * @deny (create, update, delete) if !isAdmin();
     * @principle Admins can read and write all requests, but normal users cannot.
     */
    match /requests/{requestId} {
      // Read rules
      allow get: if isAdmin();
      allow list: if isAdmin();

      // Write rules
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines rules for the /tasks/{taskId} collection.
     * @path /tasks/{taskId}
     * @allow (get, list, create, update, delete) if isAdmin();
     * @deny (create, update, delete) if !isAdmin();
     * @principle Admins can read and write all tasks, but normal users cannot.
     */
    match /tasks/{taskId} {
      // Read rules
      allow get: if isAdmin();
      allow list: if isAdmin();

      // Write rules
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines rules for the /admins/{adminId} collection.
     * @path /admins/{adminId}
     * @allow (get, create, update, delete) if request.auth.uid == adminId;
     * @deny (get, create, update, delete) if request.auth.uid != adminId;
     */
    match /admins/{adminId} {
      // Read rules
      allow get: if isOwner(adminId);
      allow list: if false; // No listing of admins

      // Write rules
      allow create: if isOwner(adminId);
      allow update: if false;
      allow delete: if isOwner(adminId);
    }

    /**
     * @description Defines rules for the /inventory collection.
     * @path /inventory
     * @allow (get, list) if isAdmin();
     * @deny (get, list) if !isAdmin();
     */
    match /inventory {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}