/**
 * @fileoverview Firestore Security Rules for ReliefLink application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control,
 * with denormalization to optimize security rule performance.
 *
 * Data Structure:
 * - /victims/{victimId}: Victim profiles, accessible only by the victim themselves or an admin.
 * - /volunteers/{volunteerId}: Volunteer profiles, accessible only by the volunteer themselves or an admin.
 * - /requests/{requestId}: Requests for aid, accessible by admins, and victims can create requests for themself
 * - /tasks/{taskId}: Tasks assigned to volunteers, accessible by admins or assigned volunteers.
 * - /admins/{adminId}: Collection of admin UIDs. Existence in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - Strict user-ownership model for victim and volunteer profiles.
 * - Role-based access control for admins, determined by their presence in the /admins collection.
 * - Denormalization of the 'victimId' field in the /requests collection to allow for efficient filtering and authorization.
 * - The 'status' field is included directly within the request, simplifying security rules and enabling status-based filtering.
 * - No public listing of any collections containing private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource.
     * This function combines the ownership check with the existence check to prevent accidental omissions.
     * It is used primarily for `update` and `delete` operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * This function performs a `get` on the `/admins/{userId}` document.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Rules for the /victims/{victimId} collection.
     * @path /victims/{victimId}
     * @allow (get) User with ID 'victim123' can get their own profile. (auth.uid: 'victim123')
     * @allow (create) User with ID 'victim123' can create their own profile. (auth.uid: 'victim123')
     * @allow (update) User with ID 'victim123' can update their own profile. (auth.uid: 'victim123')
     * @deny (get) User with ID 'otherUser' cannot get the profile of user 'victim123'. (auth.uid: 'otherUser')
     * @deny (create) User with ID 'otherUser' cannot create a profile for user 'victim123'. (auth.uid: 'otherUser')
     * @deny (update) User with ID 'otherUser' cannot update the profile of user 'victim123'. (auth.uid: 'otherUser')
     * @principle Enforces document ownership for reads and writes, and allows admin access.
     */
    match /victims/{victimId} {
      allow get: if isOwner(victimId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(victimId);
      allow update: if isExistingOwner(victimId) || isAdmin();
      allow delete: if isExistingOwner(victimId) || isAdmin();
    }

    /**
     * @description Rules for the /volunteers/{volunteerId} collection.
     * @path /volunteers/{volunteerId}
     * @allow (get) User with ID 'volunteer456' can get their own profile. (auth.uid: 'volunteer456')
     * @allow (create) User with ID 'volunteer456' can create their own profile. (auth.uid: 'volunteer456')
     * @allow (update) User with ID 'volunteer456' can update their own profile. (auth.uid: 'volunteer456')
     * @deny (get) User with ID 'otherUser' cannot get the profile of user 'volunteer456'. (auth.uid: 'otherUser')
     * @deny (create) User with ID 'otherUser' cannot create a profile for user 'volunteer456'. (auth.uid: 'otherUser')
     * @deny (update) User with ID 'otherUser' cannot update the profile of user 'volunteer456'. (auth.uid: 'otherUser')
     * @principle Enforces document ownership for reads and writes, and allows admin access.
     */
    match /volunteers/{volunteerId} {
      allow get: if isOwner(volunteerId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(volunteerId);
      allow update: if isExistingOwner(volunteerId) || isAdmin();
      allow delete: if isExistingOwner(volunteerId) || isAdmin();
    }

    /**
     * @description Rules for the /requests/{requestId} collection.
     * Admins can read and write all requests. Victims can create requests for themself.
     * @path /requests/{requestId}
     * @allow (get) Admins can read any request. (isAdmin() == true)
     * @allow (create) A victim can create a request with their ID. (request.auth.uid == request.resource.data.victimId)
     * @deny (create) A victim cannot create a request for another victim. (request.auth.uid != request.resource.data.victimId)
     * @principle Allows public read access but restricts writes to admins and the request's creator.
     */
    match /requests/{requestId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.victimId == request.auth.uid;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /tasks/{taskId} collection.
     * Admins can read and write all tasks. Volunteers can read and update tasks assigned to them.
     * @path /tasks/{taskId}
     * @allow (get) Admins can read any task. (isAdmin() == true)
     * @allow (update) Admins can update any task. (isAdmin() == true)
     * @allow (get) Volunteers can read tasks assigned to them. (resource.data.volunteerId == request.auth.uid)
     * @allow (update) Volunteers can update tasks assigned to them. (resource.data.volunteerId == request.auth.uid)
     * @deny (get) Volunteers cannot read tasks assigned to other volunteers. (resource.data.volunteerId != request.auth.uid)
     * @deny (update) Volunteers cannot update tasks assigned to other volunteers. (resource.data.volunteerId != request.auth.uid)
     * @principle Allows public read access but restricts writes to admins and the task's assigned volunteer.
     */
    match /tasks/{taskId} {
      allow get: if isAdmin() || (isSignedIn() && resource.data.volunteerId == request.auth.uid);
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() || (isSignedIn() && resource.data.volunteerId == request.auth.uid && resource != null);
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /admins/{adminId} collection.
     * Only admins can create, update, or delete admin profiles.
     * @path /admins/{adminId}
     * @allow (get) Admins can get any admin profile. (isAdmin() == true)
     * @allow (create) Admins can create admin profiles. (isAdmin() == true)
     * @allow (update) Admins can update admin profiles. (isAdmin() == true)
     * @allow (delete) Admins can delete admin profiles. (isAdmin() == true)
     * @deny (get) Non-admins cannot get admin profiles. (isAdmin() == false)
     * @deny (create) Non-admins cannot create admin profiles. (isAdmin() == false)
     * @deny (update) Non-admins cannot update admin profiles. (isAdmin() == false)
     * @deny (delete) Non-admins cannot delete admin profiles. (isAdmin() == false)
     * @principle Restricts access to admin profiles to only other admins.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}