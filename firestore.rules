/**
 * @fileoverview Firestore Security Rules for ReliefLink application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and role-based access control.
 * Victims and Volunteers have ownership over their profiles. Admins have broad access based on their presence in the /admins collection.
 *
 * Data Structure:
 * - /victims/{victimId}: Stores victim profiles, accessible only by the victim and admins.
 * - /volunteers/{volunteerId}: Stores volunteer profiles, accessible only by the volunteer and admins.
 * - /requests/{requestId}: Stores requests for aid.
 * - /tasks/{taskId}: Stores tasks assigned to volunteers.
 * - /admins/{adminId}: Stores admin UIDs. Existence in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - Listing of users (victims, volunteers, admins) is disallowed for non-admins.
 * - Data validation is relaxed in this prototyping phase to allow for rapid schema evolution.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the existence of a document in the `/admins/{adminId}` collection, avoiding complex queries in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param {string} userId - The user ID to compare against the resource's data.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Defines rules for the /victims/{victimId} collection.
     * @path /victims/{victimId}
     * @allow (get) User with UID 'victim123' can read their own profile.
     *   Request: auth.uid = 'victim123'
     * @allow (create) User with UID 'victim123' can create their own profile if victimId matches.
     *   Request: auth.uid = 'victim123', request.resource.data.id = 'victim123'
     * @allow (update) User with UID 'victim123' can update their own profile.
     *   Request: auth.uid = 'victim123'
     * @allow (delete) User with UID 'victim123' can delete their own profile.
     *   Request: auth.uid = 'victim123'
     * @deny (get) User with UID 'otherUser' cannot read victim123's profile.
     *   Request: auth.uid = 'otherUser'
     * @deny (create) User with UID 'otherUser' cannot create a victim profile with victimId 'victim123'.
     *   Request: auth.uid = 'otherUser', request.resource.data.id = 'victim123'
     * @principle Enforces document ownership and admin access.
     */
    match /victims/{victimId} {
      allow get: if isOwner(victimId) || isAdmin();
      allow list: if false;

      allow create: if isOwner(victimId) && request.resource.data.id == victimId;
      allow update: if isExistingOwner(victimId) || isAdmin();
      allow delete: if isExistingOwner(victimId) || isAdmin();
    }

    /**
     * @description Defines rules for the /volunteers/{volunteerId} collection.
     * @path /volunteers/{volunteerId}
     * @allow (get) User with UID 'volunteer456' can read their own profile.
     *   Request: auth.uid = 'volunteer456'
     * @allow (create) User with UID 'volunteer456' can create their own profile if volunteerId matches.
     *   Request: auth.uid = 'volunteer456', request.resource.data.id = 'volunteer456'
     * @allow (update) User with UID 'volunteer456' can update their own profile.
     *   Request: auth.uid = 'volunteer456'
     * @allow (delete) User with UID 'volunteer456' can delete their own profile.
     *   Request: auth.uid = 'volunteer456'
     * @deny (get) User with UID 'otherUser' cannot read volunteer456's profile.
     *   Request: auth.uid = 'otherUser'
     * @deny (create) User with UID 'otherUser' cannot create a volunteer profile with volunteerId 'volunteer456'.
     *   Request: auth.uid = 'otherUser', request.resource.data.id = 'volunteer456'
     * @principle Enforces document ownership and admin access.
     */
    match /volunteers/{volunteerId} {
      allow get: if isOwner(volunteerId) || isAdmin();
      allow list: if false;

      allow create: if isOwner(volunteerId) && request.resource.data.id == volunteerId;
      allow update: if isExistingOwner(volunteerId) || isAdmin();
      allow delete: if isExistingOwner(volunteerId) || isAdmin();
    }

    /**
     * @description Defines rules for the /requests/{requestId} collection.
     * @path /requests/{requestId}
     * @allow (get) Any signed-in user can read a request.
     *   Request: auth.uid = 'user123'
     * @allow (create) Any signed-in user can create a request.
     *   Request: auth.uid = 'user123'
     * @allow (update) Admins can update any request.
     *   Request: auth.uid exists in /admins/{adminId}
     * @allow (delete) Admins can delete any request.
     *   Request: auth.uid exists in /admins/{adminId}
     * @deny (update) Non-admins cannot update a request.
     *   Request: auth.uid does not exist in /admins/{adminId}
     * @deny (delete) Non-admins cannot delete a request.
     *   Request: auth.uid does not exist in /admins/{adminId}
     * @principle Allows public read access with restricted writes.
     */
    match /requests/{requestId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines rules for the /tasks/{taskId} collection.
     * @path /tasks/{taskId}
     * @allow (get) Any signed-in user can read a task.
     *   Request: auth.uid = 'user123'
     * @allow (create) Admins can create a task.
     *   Request: auth.uid exists in /admins/{adminId}
     * @allow (update) Admins can update any task.
     *   Request: auth.uid exists in /admins/{adminId}
     * @allow (delete) Admins can delete any task.
     *   Request: auth.uid exists in /admins/{adminId}
     * @deny (create) Non-admins cannot create a task.
     *   Request: auth.uid does not exist in /admins/{adminId}
     * @deny (update) Non-admins cannot update a task.
     *   Request: auth.uid does not exist in /admins/{adminId}
     * @deny (delete) Non-admins cannot delete a task.
     *   Request: auth.uid does not exist in /admins/{adminId}
     */
    match /tasks/{taskId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines rules for the /admins/{adminId} collection.
     * @path /admins/{adminId}
     * @allow (get) Only the admin themselves can get their own document.
     *   Request: auth.uid = 'admin123'
     * @allow (create) Only the admin themselves can create their own document.
     *   Request: auth.uid = 'admin123'
     * @allow (update) Only the admin themselves can update their own document.
     *   Request: auth.uid = 'admin123'
     * @allow (delete) Only the admin themselves can delete their own document.
     *   Request: auth.uid = 'admin123'
     * @deny (get) Other users cannot read admin profiles.
     *   Request: auth.uid = 'otherUser'
     * @deny (create) Other users cannot create admin profiles.
     *   Request: auth.uid = 'otherUser'
     * @principle Enforces document ownership.
     */
    match /admins/{adminId} {
      allow get: if isOwner(adminId);
      allow list: if false;
      allow create: if isOwner(adminId) && request.resource.data.id == adminId;
      allow update: if isExistingOwner(adminId);
      allow delete: if isExistingOwner(adminId);
    }
  }
}