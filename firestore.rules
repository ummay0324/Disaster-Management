/**
 * @description This ruleset enforces a strict user-ownership model for victims and volunteers,
 *              along with role-based access control for admins. Requests and tasks are accessible
 *              based on the associated user roles and request status.
 * @dataStructure
 *              - /victims/{victimId}: Victim profiles, accessible only by the victim or an admin.
 *              - /volunteers/{volunteerId}: Volunteer profiles, accessible only by the volunteer or an admin.
 *              - /requests/{requestId}: Aid requests, accessible based on the request status and associated victim.
 *              - /tasks/{taskId}: Tasks assigned to volunteers, accessible based on the associated request and volunteer.
 *              - /admins/{adminId}: List of admin UIDs. Existence in this collection grants admin privileges.
 * @keySecurityDecisions
 *              - Listing of users (victims, volunteers, admins) is disallowed to prevent information leakage.
 *              - Admins have read and write access to all data.
 *              - Data validation is relaxed to allow for rapid prototyping.
 * @denormalizationForAuthorization
 *              - Requests include `victimId` to easily identify the associated victim and simplify access control.
 *              - Requests include `status` to enable authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure victim profiles.
     * @path /victims/{victimId}
     * @allow (create) Authenticated user can create their own profile if the victimId matches their UID.
     * @allow (get, update, delete) Victim can access their profile if the victimId matches their UID, or if the user is an admin.
     * @deny (create) User cannot create a victim profile with an ID that doesn't match their UID.
     * @deny (get, update, delete) User cannot access another victim's profile unless they are an admin.
     * @principle Enforces document ownership for reads and writes.
     */
    match /victims/{victimId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(victimId) {
        return request.auth.uid == victimId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      function isExistingOwner(victimId) {
        return isOwner(victimId) && resource != null;
      }

      allow get: if isSignedIn() && (isOwner(victimId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(victimId);
      allow update: if isSignedIn() && (isExistingOwner(victimId) || isAdmin());
      allow delete: if isSignedIn() && (isExistingOwner(victimId) || isAdmin());
    }

    /**
     * @description Secure volunteer profiles.
     * @path /volunteers/{volunteerId}
     * @allow (create) Authenticated user can create their own profile if the volunteerId matches their UID.
     * @allow (get, update, delete) Volunteer can access their profile if the volunteerId matches their UID, or if the user is an admin.
     * @deny (create) User cannot create a volunteer profile with an ID that doesn't match their UID.
     * @deny (get, update, delete) User cannot access another volunteer's profile unless they are an admin.
     * @principle Enforces document ownership for reads and writes.
     */
    match /volunteers/{volunteerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(volunteerId) {
        return request.auth.uid == volunteerId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      function isExistingOwner(volunteerId) {
        return isOwner(volunteerId) && resource != null;
      }

      allow get: if isSignedIn() && (isOwner(volunteerId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(volunteerId);
      allow update: if isSignedIn() && (isExistingOwner(volunteerId) || isAdmin());
      allow delete: if isSignedIn() && (isExistingOwner(volunteerId) || isAdmin());
    }

    /**
     * @description Secure aid requests.
     * @path /requests/{requestId}
     * @allow (get) Any authenticated user can read a request.
     * @allow (list) Any authenticated user can list requests.
     * @allow (create) Any authenticated user can create a request.
     * @allow (update, delete) Only an admin can update or delete a request.
     * @principle Admins manage requests; read access is public.
     */
    match /requests/{requestId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Secure tasks assigned to volunteers.
     * @path /tasks/{taskId}
     * @allow (get, list) Any authenticated user can read and list tasks.
     * @allow (create, update, delete) Only an admin can create, update, or delete a task.
     * @principle Admins manage tasks; read access is public.
     */
    match /tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Secure admin UIDs.
     * @path /admins/{adminId}
     * @allow (create) Only an existing admin can create a new admin.
     * @allow (get) Any authenticated user can check if they are an admin.
     * @allow (update, delete) Only the admin themselves can update or delete their entry.
     * @principle Existence in this collection grants admin privileges.
     */
    match /admins/{adminId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      function isOwner(adminId) {
        return request.auth.uid == adminId;
      }

      function isExistingOwner(adminId) {
        return isOwner(adminId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(adminId);
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isExistingOwner(adminId);
      allow delete: if isSignedIn() && isExistingOwner(adminId);
    }
  }
}