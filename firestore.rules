/**
 * @fileoverview Firestore Security Rules for ReliefLink application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for victims and volunteers,
 * coupled with role-based access control for admins. Authorization independence
 * is achieved by denormalizing authorization-relevant data (like 'status' in requests)
 * directly into the documents, minimizing the need for costly `get()` calls.
 *
 * Data Structure:
 * - /victims/{victimId}: Stores victim profiles.
 * - /volunteers/{volunteerId}: Stores volunteer profiles.
 * - /requests/{requestId}: Stores requests for aid.
 * - /tasks/{taskId}: Stores tasks assigned to volunteers.
 * - /admins/{adminId}: Stores admin user IDs. Existence in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - Victims and volunteers can only access their own profiles.
 * - Admins have broad access to all data.
 * - Listing victims and volunteers is forbidden to prevent information leakage.
 * - Public read access is not granted to any collections in this prototype.
 *
 * Denormalization for Authorization:
 * - The `requests` collection includes a `status` field for efficient filtering and authorization.
 *
 * Structural Segregation:
 * - No structural segregation is used in this prototype. All data is stored in a single database.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param {string} userId The user's ID.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and it exists.
     * @param {string} userId The user's ID.
     * @returns {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

     /**
     * @description Checks if the user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Rules for the /victims collection.
     * @path /victims/{victimId}
     * @allow (create) User 'zkqCoL7pLONcS4tHizfFPYULNLz1' can create a victim document if request.auth.uid == victimId.
     * @deny (create) User 'someOtherUserId' cannot create a victim document with victimId 'zkqCoL7pLONcS4tHizfFPYULNLz1'.
     * @allow (get) User 'zkqCoL7pLONcS4tHizfFPYULNLz1' can get their own victim document.
     * @deny (get) User 'someOtherUserId' cannot get victim document with victimId 'zkqCoL7pLONcS4tHizfFPYULNLz1'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /victims/{victimId} {
      // Read rules
      allow get: if isOwner(victimId) || isAdmin();
      allow list: if false;

      // Write rules
      allow create: if isSignedIn() && isOwner(victimId) && request.resource.data.id == victimId;
      allow update: if isExistingOwner(victimId) || isAdmin() && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(victimId) || isAdmin();
    }

    /**
     * @description Rules for the /volunteers collection.
     * @path /volunteers/{volunteerId}
     * @allow (create) User 'zkqCoL7pLONcS4tHizfFPYULNLz1' can create a volunteer document if request.auth.uid == volunteerId.
     * @deny (create) User 'someOtherUserId' cannot create a volunteer document with volunteerId 'zkqCoL7pLONcS4tHizfFPYULNLz1'.
     * @allow (get) User 'zkqCoL7pLONcS4tHizfFPYULNLz1' can get their own volunteer document.
     * @deny (get) User 'someOtherUserId' cannot get volunteer document with volunteerId 'zkqCoL7pLONcS4tHizfFPYULNLz1'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /volunteers/{volunteerId} {
      // Read rules
      allow get: if isOwner(volunteerId) || isAdmin();
      allow list: if false;

      // Write rules
      allow create: if isSignedIn() && isOwner(volunteerId) && request.resource.data.id == volunteerId;
      allow update: if isExistingOwner(volunteerId) || isAdmin() && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(volunteerId) || isAdmin();
    }

    /**
     * @description Rules for the /requests collection.
     * @path /requests/{requestId}
     * @allow (create) Any signed-in user can create a request.
     * @deny (create) An unsigned-in user cannot create a request.
     * @allow (get) Any signed-in user can get a request.
     * @deny (get) An unsigned-in user cannot get a request.
     * @principle Allows anyone to read all requests but restricts writes to admins only.
     */
    match /requests/{requestId} {
      // Read rules: allow public read
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();

      // Write rules: only admins can create, update, or delete requests
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /tasks collection.
     * @path /tasks/{taskId}
     * @allow (create) Only admins can create a task.
     * @deny (create) A non-admin user cannot create a task.
     * @allow (get) Any signed-in user can get a task.
     * @deny (get) An unsigned-in user cannot get a task.
     */
    match /tasks/{taskId} {
      // Read rules: allow public read
      allow get: if isSignedIn() || isAdmin();
      allow list: if isAdmin();

      // Write rules: only admins can create, update, or delete tasks
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /admins collection.
     * @path /admins/{adminId}
     * @allow (create) Only a signed-in user can create their admin document, and only if the document ID matches their UID.
     * @deny (create) A signed-in user cannot create an admin document with an ID that doesn't match their UID.
     * @allow (get) Any signed-in user can get an admin document.
     * @deny (get) An unsigned-in user cannot get an admin document.
     */
    match /admins/{adminId} {
        // Read rules
        allow get: if isAdmin();
        allow list: if false;

        // Write rules
        allow create: if isSignedIn() && isOwner(adminId) && request.resource.data.id == adminId;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rules for the /shelters collection.
     * @path /shelters
     * @allow (list) Only admins can list shelters.
     * @deny (list) A non-admin user cannot list shelters.
     * Error was happening because of this rule.
     */
    match /shelters {
      allow get: if false;
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}